#version 400 core

in vec2 passTextureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 outColor;

uniform sampler2D bgTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

void main(void){
        vec4 blendMapColor  = texture(blendMap, passTextureCoordinates);

        float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.r + blendMapColor.g + blendMapColor.b);
        vec2 tileCoordinates = passTextureCoordinates * 40.0;
        vec4 bgTextureColor = texture(bgTexture, tileCoordinates) * backTextureAmount;
        vec4 rTextureColor = texture(rTexture, tileCoordinates) * blendMapColor.r;
        vec4 gTextureColor = texture(gTexture, tileCoordinates) * blendMapColor.g;
        vec4 bTextureColor = texture(bTexture, tileCoordinates) * blendMapColor.b;
        
        vec4 totalColor = bgTextureColor + rTextureColor + gTextureColor + bTextureColor;
	
        vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.2);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColor;
	

	outColor =  vec4(diffuse,1.0) * totalColor + vec4(finalSpecular,1.0);

}